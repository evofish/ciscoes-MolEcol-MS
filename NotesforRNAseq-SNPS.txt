#####COREGONUS SNPS 

>>Trimming & Assembly 

Trimming of adapters and quality filtering:
    trim_galore -q 30 --phred33 --fastqc --paired /mnt/sdd1/DeepSearch2/RAW_SEQUENCES_ALL/Cisco_Transcriptomes_batch2_raw_seqs/*.fastq.gz

Assembly: 
    Trinity --seqType fq --max_memory 60G --samples_file CK-sample-list.txt --CPU 10 --output trinity/

After this run Transdecoder for the three transcriptomes (using the most basic commands on the website): 
Choose the file "Trinity.fasta.Transdecoder.cds" as the transcriptome, the name is changed to reflect the name of the species. 

Then on the Transdecoder side, run stringent cd-hit: 
    cdhit -i Trinity-transdecoder-cds.fasta -o Trinity-transdec-cds-cdhit.fasta -M  -50000 c 0.95 -T 20 -g 1

Re-do transcriptomes for CH and CZ, as there are hybrids: 
    #!/bin/bash
    #script for test of mapping back to large transcriptome
    cd ~/Documents/cisco-clean-data/cisco/CH/ &&
    Trinity --seqType fq --max_memory 200G --samples_file CH-sample-list.txt --CPU 20 --output trinity/ &&
    TransDecoder.LongOrfs -t trinity/Trinity.fasta &&
    TransDecoder.Predict -t trinity/Trinity.fasta 
    #cdhit -i Trinity-transdecoder-cds.fasta -o Trinity-transdec-cds-cdhit.fasta -c 0.95 -T 20 -g 1
    ~/Documents/cisco-clean-data/cisco/CZ/ &&
    Trinity --seqType fq --max_memory 200G --samples_file CZ-sample-list.txt --CPU 20 --output trinity/ &&
    *TransDecoder.LongOrfs -t trinity/Trinity.fasta &&
    TransDecoder.Predict -t trinity/Trinity.fasta 
    #cdhit -i Trinity-transdecoder-cds.fasta -o Trinity-transdec-cds-cdhit.fasta -c 0.95 -T 20 -g 1 

> Running Busco for the transdecoder results:

    python scripts/run_BUSCO.py -i '/home/krablab/Documents/apps/TransDecoder-TransDecoder-v5.5.0/Trinity-CA-cdhit.fasta.transdecoder.cds' -o trinity-busco-transdecoder -l actinopterygii_odb9/ -m tran -c 3

Busco Transdecoder
3876 Complete BUSCOs (C)
977 Complete and single-copy BUSCOs (S)
2899 Complete and duplicated BUSCOs (D)
405 Fragmented BUSCOs (F)
303 Missing BUSCOs (M)
4584 Total BUSCO groups searched

>> Annotation: 

Uniprot
    nice -n 10 blastx -query CK-Trinity-transdec-cds-cdhit.fasta -db '/home/krablab/Documents/databases/uniprot/uniprot_sprot.fasta' -evalue 1e-10 -num_threads 8 -max_target_seqs 5 -outfmt 6 > CK-uniprot-may2019.txt

Trembl
    nice -n 15 blastx -query CK-Trinity-transdec-cds-cdhit.fasta -db '/home/krablab/Documents/databases/trembl/uniprot_trembl.fasta' -evalue 1e-10 -num_threads 8 -max_target_seqs 5 -outfmt 6 > CK-trembl-may2019.txt

zebrafish and pike 
    
    blastx -query CA-Trinity-transdec-cds-cdhit.fasta -db '/home/krablab/Documents/databases/Katie_databases/Katie_northernpike_proteins' -evalue 1e-10 -num_threads 4 -max_target_seqs 5 -outfmt 6 > CA-northpike-anot-may2019.txt; 
    blastx -query CA-Trinity-transdec-cds-cdhit.fasta -db '/home/krablab/Documents/databases/Katie_databases/Katie_zebrafish_proteins'  -evalue 1e-10 -num_threads 4 -max_target_seqs 5 -outfmt 6 > CA-zebrafish-anot-may2019.txt 

>>>SNPs
>BOWTIE 2 

Using a pipeline to obtain SNPs for Coregonid transcriptomes, which applies Bowtie2 for initial mapping and BCF tools for SNP filtering. After this, the SNPs will be filtered based on Heterozygocity and FIS.

Using the Trinity assembled Transcriptome of C. artedi summarized with transdecoder and cd-hit as reference. First you have to build the library using the reference transcriptome:

    bowtie2-build 'Trinity-transdec-cds-cdhit-feb19.fasta' Trinity-transdec-cds-cdhit-feb19 -f --threads 6

The files are in the Assembly folder. After this I made a bash script for the actual bowtie2 command (bowtie2-bash-script.sh), where each line was a separate individual. Example with one individual:

    bowtie2 -q -x Trinity-transdec-cds-cdhit-feb19 -1 /mnt/sdd1/cisco-clean-oct2018/CA/CA01_R1.fq.gz -2 /mnt/sdd1/cisco-clean-oct2018/CA/CA01_R2.fq.gz -S /mnt/sdd1/cisco-clean-oct2018/assembly/CA01.sam -p 7;

>The program TABLET to see the mapping of the SAM files to the transcriptome

>Convert SAM to BAM files, sort and index them using samtools (Bash script):

    #!/bin/bash
    #script for samtools indexing
    for f1 in *.sam
    do
    samtools view -b -@5 -o ${f1%%.sam}”.bam” -O BAM –reference ‘/mnt/sdd1/cisco-clean-oct2018/CA/trinity/Trinity-CA-cdhit.fasta’ ${f1}
    samtools sort -@ 5 -O BAM –reference ‘/mnt/sdd1/cisco-clean-oct2018/CA/trinity/Trinity-CA-cdhit.fasta’ -o sort_${f1%%.sam}’.bam’ ${f1%%.sam}”.bam”
    samtools index sort_${f1%%.sam}’.bam’ -@5
    rm ${f1%%.sam}”.bam”
    done

This didn’t work so well with the names as all files had *.sam.bam, so to change the names I used the command rename ‘s/sam.bam/bam/g’ *

After this make an index for the FASTA reference file with samtools:

    samtools faidx ../CA/trinity/Trinity-CA-cdhit.fasta
    
>BCF tools: 

Getting only SNPS in a VCF file (-I makes the program ignore indels)

    bcftools mpileup -b samples-bam-format.txt -C 50 -f '/mnt/sdd1/cisco-clean-oct2018/CA/trinity/Trinity-CA-cdhit.fasta' -C 50 -o allspecies-bcf-dec18.vcf -q 5 -Q 30 -Ov --threads 5 -I 

Notes: -q 5 note that his value is super stringent, checkout this website that discusses the quality (https://sequencing.qcfail.com/articles/mapq-values-are-really-useful-but-their-implementation-is-a-mess/). The program runs faster when the output file is not compressed, it is recommended to use -Ou for most of the bcftools steps. 

For the second run with the smaller transcriptome, I did a much less stringent approach:
    
    bcftools mpileup -b samples-bam-format.txt -C 50 -f 'Trinity-transdec-cds-cdhit-feb19.fasta' -o allspecies-bcf-mar19.vcf -q 1 -a "AD , GT , PL" -Q 25 -Ov --threads 5 -I

Note: BCFTools can be weird about the "annotation" command "-a", it might be necessary to remove quotes, and separate each option with spaces after and before the commas. 

>Filtering with BCFtools

You can filter the VCF file to get SNPs (-m2 & -M2 is to get only biallelic data). Then you can filter the SNPs (bi-allelic, with coverage of 15x or more). the -v here is extremely important as that way you only get variable sites. Using the transdecoder+cdhit transcriptome:

    bcftools call -m -Ov -o cisco-snps-samtools2.vcf --threads 6 -V indels -v allspecies-bcf-feb19.vcf | vcfutils.pl varFilter -d 12 cisco-snps-samtools2.vcf > cisco-snps-filtered-2.vcf (this one output doesn't include allele depth)

for march test that has the Allele Depth

bcftools call -m -Ov -o cisco-snps-samtools3-mar.vcf --threads 6 -V indels -v allspecies-bcf-mar19.vcf | vcfutils.pl varFilter -d 12 cisco-snps-samtools3-mar.vcf > cisco-snps-filtered-3-mar.vcf

>Further filtering with vcftools 

Initial filtering with VCFtools to obtain SNPs that are in 75% of the population (only 109)
  
  vcftools --vcf cisco-snps-filtered.vcf --recode --out cisco-snps-filter2 --max-missing 0.75 
  For 100% it's only 8snps
  For 50% is 610 snps

Second try with small transcriptome:
For 0.75: 267,325 out of a possible 443,611 Sites
For 100%: 121,724 out of a possible 443611

With thinning (only prints out snps separated by that number of bp), in this case 500
vcftools --vcf cisco-snps-filtered-2.vcf --recode --out cisco-snps-filter2 --max-missing 1 --thin 500  

For 100% thin 200: 52650
For 100% with thin 500: 26,940
For 100% with thin 1000: 22,285 

Note: There was an error between the population files and the name of the sequences in the Pop files. Always check for that. 

> Initial estimate of Fst between the species (final estimate was calculated with GenoDive**): 
vcftools --vcf cisco-snps-filter2.recode.vcf --weir-fst-pop CA-pop.txt --weir-fst-pop CH-pop.txt --weir-fst-pop CZ-pop.txt --weir-fst-pop CK-pop.txt --out All-fst-75-test1

The average difference for all sp was 0.012
CA vs CH 0.013597
CA vs CK 0.0147
CA vs CZ -0.005

>OHANA FOR SNP ANALYSES 

For snp analyses, I had to install Ohana, which was very difficult. check out this guide: https://github.com/jade-cheng/ohana/issues/4

After that the libraries were still not compiled, so I had to make them visible for other software: 

    export LD_LIBRARY_PATH=/opt/OpenBLAS/lib:$LD_LIBRARY_PATH

Running the conversion with plink
  plink --vcf cisco-snps-filter3-march-thin.recode.vcf --recode12 --geno 0.0 --out cisco --allow-extra-chr

Warming message (reason why there's less loci in the PLINK translated dataset). 
Options in effect:
  --allow-extra-chr
  --geno 0.0
  --out cisco-cisco
  --recode 12 tab
  --vcf cisco-snps-filter3-march-thin.recode.vcf

772553 MB RAM detected; reserving 386276 MB for main workspace.
--vcf: cisco-cisco-temporary.bed + cisco-cisco-temporary.bim +
cisco-cisco-temporary.fam written.
22285 variants loaded from .bim file.
32 people (0 males, 0 females, 32 ambiguous) loaded from .fam.
Ambiguous sex IDs written to cisco-cisco.nosex .
Using 1 thread (no multithreaded calculations invoked).
Before main variant filters, 32 founders and 0 nonfounders present.
Calculating allele frequencies... done.
Total genotyping rate is 0.999289.
93 variants removed due to missing genotype data (--geno).***
22192 variants and 32 people pass filters and QC.
Note: No phenotypes present.
--recode ped to cisco-cisco.ped + cisco-cisco.map ... done.

*** Update Sept 2 2019, the issue here is that the code deletes genotypes with 10% of missing data (—geno 0.1). In order to identify which ones are those, I repeated a similar code in VCFtools: 

This creates the *.ped file, which needs to be converted to *.dgm

convert ped2dgm cisco.ped cisco.dgm

qpas cisco-june2019.dgm -k 3 -qo q.matrix -fo f.matrix -mi 5
seed: 3266231913

iter duration log_likelihood delta-lle
0 0.039889 -1.9150346954096262e+06
1 0.103715 -1.1872580694631729e+06 7.2777662594645331e+05
2 0.094834 -6.6359659630937641e+05 5.2366147315379651e+05
3 0.104121 -6.1175079514139262e+05 5.1845801167983795e+04
4 0.097084 -5.9587495215753501e+05 1.5875842983857612e+04
5 0.094112 -5.8336108175080409e+05 1.2513870406730915e+04

Writing Q matrix to q.matrix
Writing F matrix to f.matrix

The idea is to run it more times until the likelihood values don't change.... this is the example with mi 100 which runs the estimates for 100 iterations, and it gets stable around 50

Command:
qpas cisco-june2019.dgm -k 4 -qo q-1k-iterations-june -fo f-1k-iterations-june -mi 100
seed: 1699824716

Running it with a K=3 and K=4. The basic commands are simply: number of repetitions (mi), input q (qi), output q (qo), same for fi and f0

Command lines for all the analyses with Ohana, they were repeated for both K=3 and K=4

 1992  qpas cisco-june2019.dgm -k 4 -qo 1k-iterations-june.matrix -fo 1k-iterations-june.matrix -mi 1000
 1993  qpas
 1994  export LD_LIBRARY_PATH=/opt/OpenBLAS/lib/
 1995  qpas cisco-june2019.dgm -k 4 -qo 1k-iterations-june.matrix -fo 1k-iterations-june.matrix -mi 1000
 1996  head -n4 1k-iterations-june.matrix 
 1997  qpas cisco-june2019.dgm -k 4 -qo 1k-iterations-june -fo 1k-iterations-june -mi 1000
 1998  head -n4 1k-iterations-june 
 1999  qpas cisco-june2019.dgm -k 4 -qo q-1k-iterations-june -fo f-1k-iterations-june -mi 100
 2000  head -n4 q-1k-iterations-june 
 2001  qpas cisco-june2019.dgm -k 3 -qo q-1kiterations-k3-june -fo f-1kiterations-k3-june -mi 100
 2002  nemeco
 2003  nemeco cisco-june2019.dgm f-1kiterations-k3-june.matrix -c k3-c.matrix -mi 5 
 2004  nemeco cisco-june2019.dgm f-1kiterations-k3-june.matrix -co k3-c.matrix -mi 5 
 2005  nemeco cisco-june2019.dgm f-1kiterations-k3-june.matrix -co k3-c.matrix -mi 100 
 2006  nemeco cisco-june2019.dgm f-1k-iterations-june-k4.matrix -co k4-c.matrix -mi 100 
 2007  cat k3-c.matrix 
 2008  cat k4-c.matrix 
 2009  convert cov2nwk k3-c.matrix k3-tree.nwk
 2010  convert cov2nwk k4-c.matrix k4-tree.nwk
 2011  cat k4-tree.nwk 
 2012  cat k3-tree.nwk 
 2013  convert nwk2svg k3-tree.nwk k3-tree.svg
 2014  convert nwk2svg k4-tree.nwk k4-tree.svg
 2015  selscan cisco-june2019.dgm f-1k-iterations-june-k4.matrix k4-c.matrix > k4-lle-ratios.txt
 2016  selscan cisco-june2019.dgm f-1kiterations-k3-june.matrix k3-c.matrix > k3-lle-ratios.txt
 2017  qpas cisco-june2019.dgm -k 4 -qi k4-q_subset.matrix -fo k4-f_full.matrix -mi 100 -fq
 2018  qpas cisco-june2019.dgm -k 4 -qi q-1k-iterations-k4-june.matrix -fo f-1k-iterations-june-k4.matrix -mi 100 -fq
 2019  qpas cisco-june2019.dgm -k 4 -qi q-1k-iterations-k4-june.matrix -fo k4-f_full.matrix -mi 100 -fq
 2020  qpas cisco-june2019.dgm -k 4 -qi q-1kiterations-k3-june.matrix -fo k3-f_full.matrix -mi 100 -fq
 2021  selscan cisco-june2019.dgm k3-f_full.matrix k3-cout.matrix
 2022  selscan cisco-june2019.dgm k3-f_full.matrix cout.matrix
 2023  selscan cisco-june2019.dgm k3-f_full.matrix k4-c.matrix
 2024  selscan cisco-june2019.dgm k3-f_full.matrix k3-c.matrix
 2025  selscan cisco-june2019.dgm k3-f_full.matrix k3-c.matrix > k3-selescan-output.txt
 2026  selscan cisco-june2019.dgm k4-f_full.matrix k4-c.matrix > k4-selescan-output.txt
 2027  python '/home/krablab/Documents/apps/ohana/tools/sample-sites.py' 
 2028  python '/home/krablab/Documents/apps/ohana/tools/sample-sites.py' cisco-june2019.dgm 10 cisco-june2019-10perc.dgm
 2029  python2 '/home/krablab/Documents/apps/ohana/tools/sample-sites.py' cisco-june2019.dgm 10 cisco-june2019-10perc.dgm
 2030  qpas cisco-june2019-10perc.dgm -e 0.0001 -k 4 -qo k4-cisco_10perce_Q.matrix -fo k4-cisco_10perce_F.matrix
 2031  qpas cisco-june2019-10perc.dgm -e 0.0001 -k 4 -qo k4-10perc-Q.matrix -fo k4-10perc-F.matrix 
 2032  nemeco cisco-june2019-10perc.dgm k4-10perc-F.matrix -e 0.0 -co k4-10perc-C.matrix
 2033  qpas cisco-june2019.dgm -qi k4-10perc-Q.matrix -fo k4-cisco-F.matrix -e 0.0001 -fq
 2034  selscan cisco-june2019.dgm k4-cisco-F.matrix k4-10perc-C.matrix > cisco-selection-final.txt

This is the result of the 100 iterations (at the bottom so it's not in the way)
qpas cisco-june2019.dgm -k 4 -qo q-1k-iterations-june -fo f-1k-iterations-june -mi 100
seed: 1699824716
iter    duration    log_likelihood    delta-lle
0    0.045241    -1.9010018271602127e+06
1    0.159215    -1.1753821069997959e+06    7.2561972016041679e+05
2    0.149985    -6.3703967699957965e+05    5.3834243000021623e+05
3    0.155850    -6.0086569778621988e+05    3.6173979213359766e+04
4    0.137774    -5.8542907190298440e+05    1.5436625883235480e+04
5    0.136244    -5.7307367188361555e+05    1.2355400019368855e+04
6    0.139984    -5.6190915173923515e+05    1.1164520144380396e+04
7    0.131734    -5.5145633598721807e+05    1.0452815752017079e+04
8    0.129956    -5.4160629182639555e+05    9.8500441608225228e+03
9    0.132524    -5.3224608993153996e+05    9.3602018948555924e+03
10    0.129168    -5.2323940743166185e+05    9.0066824998781085e+03
11    0.129291    -5.1454219815890631e+05    8.6972092727555428e+03
12    0.128581    -5.0596307174883777e+05    8.5791264100685366e+03
13    0.128738    -4.9755930633782322e+05    8.4037654110145522e+03
14    0.129392    -4.8949199948423071e+05    8.0673068535925122e+03
15    0.127270    -4.8188786700627435e+05    7.6041324779563583e+03
16    0.127213    -4.7507794768176455e+05    6.8099193245097995e+03
17    0.126368    -4.6940780186485761e+05    5.6701458169069374e+03
18    0.125830    -4.6519761112872366e+05    4.2101907361339545e+03
19    0.126346    -4.6241455010279483e+05    2.7830610259288223e+03
20    0.126828    -4.6081026269398455e+05    1.6042874088102835e+03
21    0.128194    -4.6000188822701026e+05    8.0837446697428823e+02
22    0.126885    -4.5957901677923615e+05    4.2287144777411595e+02
23    0.127362    -4.5925938013563101e+05    3.1963664360513212e+02
24    0.125126    -4.5894515694670705e+05    3.1422318892396288e+02
25    0.128081    -4.5863763709324854e+05    3.0751985345850699e+02
26    0.125251    -4.5837704415760277e+05    2.6059293564577820e+02
27    0.125240    -4.5810971678648947e+05    2.6732737111329334e+02
28    0.125248    -4.5793889807216858e+05    1.7081871432089247e+02
29    0.130064    -4.5784822367918177e+05    9.0674392986809835e+01
30    0.124987    -4.5781902328814141e+05    2.9200391040358227e+01
31    0.125727    -4.5772419067621388e+05    9.4832611927529797e+01
32    0.125997    -4.5764445662843686e+05    7.9734047777019441e+01
33    0.126480    -4.5755941239040584e+05    8.5044238031026907e+01
34    0.124763    -4.5751842584928841e+05    4.0986541117425077e+01
35    0.126255    -4.5749791601317842e+05    2.0509836109995376e+01
36    0.125968    -4.5747614092460199e+05    2.1775088576425333e+01
37    0.126733    -4.5745077834704786e+05    2.5362577554129530e+01
38    0.126449    -4.5744002875616297e+05    1.0749590884894133e+01
39    0.126412    -4.5742999734623230e+05    1.0031409930670634e+01
40    0.131026    -4.5742612759230816e+05    3.8697539241402410e+00
41    0.125313    -4.5742406910458335e+05    2.0584877248038538e+00
42    0.126342    -4.5742198804588878e+05    2.0810586945735849e+00
43    0.125641    -4.5741976618243870e+05    2.2218634500750341e+00
44    0.126784    -4.5741714839591045e+05    2.6177865282515995e+00
45    0.128617    -4.5741391432677943e+05    3.2340691310237162e+00
46    0.127752    -4.5740965304134518e+05    4.2612854342442006e+00
47    0.127510    -4.5740372213730926e+05    5.9309040359221399e+00
48    0.126084    -4.5739445874625194e+05    9.2633910573204048e+00
49    0.126379    -4.5737921467178949e+05    1.5244074462447315e+01
50    0.126308    -4.5736192722426465e+05    1.7287447524839081e+01
51    0.127577    -4.5736091476798640e+05    1.0124562782584690e+00
52    0.130058    -4.5736010983459244e+05    8.0493339395616204e-01
53    0.126043    -4.5735902767609013e+05    1.0821585023077205e+00
54    0.124366    -4.5735745624293690e+05    1.5714331532362849e+00
55    0.125820    -4.5735515663601848e+05    2.2996069184155203e+00
56    0.124105    -4.5735166234889365e+05    3.4942871248349547e+00
57    0.124348    -4.5734621745886345e+05    5.4448900301940739e+00
58    0.125370    -4.5733771213535982e+05    8.5053235036320984e+00
59    0.125850    -4.5733039163762191e+05    7.3204977379064076e+00
60    0.124070    -4.5732890582500491e+05    1.4858126170001924e+00
61    0.126497    -4.5732700009840733e+05    1.9057265975861810e+00
62    0.126310    -4.5732422832078306e+05    2.7717776242643595e+00
63    0.125335    -4.5731988032320177e+05    4.3479975812952034e+00
64    0.124305    -4.5731288333026331e+05    6.9969929384533316e+00
65    0.124477    -4.5730190201161947e+05    1.0981318643840495e+01
66    0.125582    -4.5730020169716241e+05    1.7003144570626318e+00
67    0.127009    -4.5730017779513443e+05    2.3902027984149754e-02
68    0.124162    -4.5730017745987710e+05    3.3525732578709722e-04
69    0.125310    -4.5730017742354586e+05    3.6331242881715298e-05
70    0.126002    -4.5730017741113639e+05    1.2409465853124857e-05
71    0.126151    -4.5730017740684462e+05    4.2917672544717789e-06
72    0.124659    -4.5730017740533338e+05    1.5112455002963543e-06
73    0.124870    -4.5730017740481341e+05    5.1996903494000435e-07
74    0.126019    -4.5730017740461655e+05    1.9685830920934677e-07
75    0.129563    -4.5730017740454996e+05    6.6589564085006714e-08
76    0.124547    -4.5730017740453396e+05    1.6007106751203537e-08
77    0.125929    -4.5730017740452749e+05    6.4610503613948822e-09
78    0.126778    -4.5730017740451894e+05    8.5565261542797089e-09
79    0.125302    -4.5730017740451562e+05    3.3178366720676422e-09
80    0.126062    -4.5730017740451416e+05    1.4551915228366852e-09
81    0.124896    -4.5730017740451224e+05    1.9208528101444244e-09
82    0.127296    -4.5730017740451364e+05    -1.3969838619232178e-09
83    0.125885    -4.5730017740451253e+05    1.1059455573558807e-09
84    0.124758    -4.5730017740451690e+05    -4.3655745685100555e-09
85    0.127895    -4.5730017740451661e+05    2.9103830456733704e-10
86    0.124860    -4.5730017740451457e+05    2.0372681319713593e-09
87    0.129875    -4.5730017740451219e+05    2.3865140974521637e-09
88    0.124378    -4.5730017740451323e+05    -1.0477378964424133e-09
89    0.124262    -4.5730017740451475e+05    -1.5133991837501526e-09
90    0.126653    -4.5730017740451923e+05    -4.4819898903369904e-09
91    0.124641    -4.5730017740451253e+05    6.6938810050487518e-09
92    0.124899    -4.5730017740451387e+05    -1.3387762010097504e-09
93    0.125403    -4.5730017740451382e+05    5.8207660913467407e-11
94    0.128563    -4.5730017740451411e+05    -2.9103830456733704e-10
95    0.125809    -4.5730017740451155e+05    2.5611370801925659e-09
96    0.124806    -4.5730017740451067e+05    8.7311491370201111e-10
97    0.125886    -4.5730017740451067e+05    0.0000000000000000e+00
98    0.130557    -4.5730017740451102e+05    -3.4924596548080444e-10
99    0.125747    -4.5730017740451172e+05    -6.9849193096160889e-10
100    0.125202    -4.5730017740451166e+05    5.8207660913467407e-11

> Threepop - f3-statistic for hybridization

This is the test used to determine hybridization if ciscoes, based on Reich, D., Thangaraj, K., Patterson, N., Price, A. L., & Singh, L. (2009). Reconstructing Indian population history. Nature, 461(7263), 489-494. 

From Manual: "The output is four columns. These are the populations used to calculate the f3 statistic, the f3 statistic, the standard error in the f3 statistic, and the Z-score. For example, the following line shows the f3 statistic where Colombian is population A, Han is population B, and Sardinian is population "

RESULTS FOR THREEPOP
 
  threepop -i treemix-input-cisco.frq.gz -k 500

npop:4 nsnp:19106
Estimating covariance matrix in 38 blocks of size 500
Estimating f_3 in 38 blocks of size 500
total_nsnp 19106 nsnp 19106
CHOY;CKIY,CZEN -0.00209352 0.000166823 -12.5494
CKIY;CHOY,CZEN 0.0047405 0.000300196 15.7913
CZEN;CKIY,CHOY -0.0019851 0.000204165 -9.72299
Estimating f_3 in 38 blocks of size 500
total_nsnp 19106 nsnp 19106
CART;CKIY,CHOY 0.000478558 0.000219294 2.18227
CHOY;CKIY,CART 0.000309408 0.000208016 1.48743
CKIY;CHOY,CART 0.00233757 0.000282094 8.28651
Estimating f_3 in 38 blocks of size 500
total_nsnp 19106 nsnp 19106
CART;CKIY,CZEN 0.000361444 0.000226923 1.59281
CKIY;CZEN,CART 0.00245469 0.000278961 8.7994
CZEN;CKIY,CART 0.000300718 0.000214389 1.40267
Estimating f_3 in 38 blocks of size 500
total_nsnp 19106 nsnp 19106
CART;CHOY,CZEN 0.00276437 0.000180393 15.3242
CHOY;CZEN,CART -0.00197641 0.000133638 -14.7893
CZEN;CHOY,CART -0.00210221 0.000180996 -11.6147

RESULTS FOR FOURPOP
$$ fourpop -i treemix-input-cisco.frq.gz -k 500
npop:4 nsnp:19106
Estimating covariance matrix in 38 blocks of size 500
Estimating f_4 in 38 blocks of size 500
total_nsnp 19106 nsnp 19106
CKIY,CART;CHOY,CZEN 0.000117113 0.000152808 0.766407
CKIY,CHOY;CZEN,CART -0.00240293 0.000174803 -13.7465
CKIY,CZEN;CHOY,CART -0.00228582 0.000211191 -10.8235


### CISCO Orthology 

For the analysis of Orthology, I separated the four groups as separate species, and ran Orthofinder with Diamond -S

There are about 55k genes that are Orthologous for all Sp, about 10K of them only have one copy on each species, the other ones have multiple copies on each group.

OrthoFinder assigned 837268 genes (79.3% of total) to 144909 orthogroups. Fifty percent of all genes were in orthogroups with 6 or more genes (G50 was 6) and were contained in the largest 49827 orthogroups (O50 was 49827). There were 56901 orthogroups with all species present and 9793 of these consisted entirely of single-copy genes.

I have now a list of all OG's that are shared across species, in addition I have the OG's fasta files individually. The OG's fasta file have multiple sequences per species, but the longest sequence could be extracted, as they are based on length. 

To extract single copy orthologs and all orthologs present in 4 species:
https://github.com/davidemms/OrthoFinder/issues/154

The issue now after redoing only with 3 groups is that there is no proper way to do the branch-sites model. It would be possible to do comparisons with other assembled transcriptomes: 

Carrthers et al. 2018: https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-017-4379-x#MOESM1

On MARCH 30 2019

The test is now being run with European whitefish as outgroup, combining the transcriptomes of CH and CZ (they were simply contatenated), AND WITH THE new transcriptome of CZ which excludes individual of CK. The downloaded transcriptome of the whitefish was ran through transdecoder Long Orfs to produce the PEP file.

Code for orthofinder: (diamond instead of blast, because it runs faster)
orthofinder -f orthology/ -t 4 -S diamond

Generate fasta files for all orthos:
orthofinder -fg Results_Mar31/ -M msa -os 

to get only sequences from the singletons into a folder:
cat '/mnt/sdd1/cisco-clean-oct2018/orthology/Results_Mar31/SingleCopyOrthogroups.txt' | xargs mv -t ../singletons-apr2019/

In total there were 706 singletons which will be really good way to start the analysis.

Extract the codons of each species from each of the Orthologous files, you can first extract the rows of singletons using awk or sed: 

Transdecoder.cds has the sequences from pep
Orthogroups.csv has the sequences that belong to each OG
SingleCopyOrthogroups.txt has the sequences with only a single copy
